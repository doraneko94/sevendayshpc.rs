{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7","program":"/home/doraneko94/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","custom_derive","/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=533800c271c80c43","-C","extra-filename=-533800c271c80c43","--out-dir","/home/doraneko94/sevendayshpc.rs/mpi-tool/target/rls/debug/deps","-L","dependency=/home/doraneko94/sevendayshpc.rs/mpi-tool/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/doraneko94/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/doraneko94/sevendayshpc.rs/mpi-tool/target/rls/debug/deps/libcustom_derive-533800c271c80c43.rmeta"},"prelude":{"crate_id":{"name":"custom_derive","disambiguator":[68407038146651586,2578858880854176227]},"crate_root":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src","external_crates":[{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12673765241971086519,1979875191208036248]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16221439354469382097,15565837348772828253]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15613252303691562375,4556165055238676072]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12269617896898487533,65142111397584226]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15862783141653200230,4773813417861420487]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[501305773035659233,3889300012469539238]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9126002216567348836,15610270334556716503]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9479301707518706798,13352731276321566042]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[15203654865662241151,17897348793673631766]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10290502124864695413,7672610073830174493]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14838544226648722576,13006716085524361330]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9246889555580827340,16878203682218964580]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8284748314555817558,4769950866534510046]}},{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14671874173783541769,17969261176539820175]}}],"span":{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","byte_start":382,"byte_end":12792,"line_start":10,"line_end":462,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","byte_start":382,"byte_end":12792,"line_start":10,"line_end":462,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3}],"decl_id":null,"docs":"**Note**: This crate has been superseded by `macro-attr`.","sig":null,"attributes":[{"value":"!\n**Note**: This crate has been superseded by `macro-attr`.\n\nThis crate provides a macro that enables the use of custom `derive` attributes.\n\nTo use it, make sure you link to the crate like so:\n\n```rust\n#[macro_use] extern crate custom_derive;\n# macro_rules! Dummy { (() struct $name:ident;) => {}; }\n# custom_derive! { #[derive(Clone, Dummy)] struct Foo; }\n# fn main() { let _ = Foo; }\n```\n\n> **Note**: the `custom_derive!` macro itself is not documented, as the automatic documentation for it would be uselessly huge and incomprehensible.\n\n<style type=\"text/css\">\n.link-block { font-family: \"Fira Sans\"; }\n.link-block > p { display: inline-block; }\n.link-block > p > strong { font-weight: 500; margin-right: 1em; }\n.link-block > ul { display: inline-block; padding: 0; list-style: none; }\n.link-block > ul > li {\n  font-size: 0.8em;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  padding: 0.3em;\n  display: inline-block;\n}\n</style>\n<span></span><div class=\"link-block\">\n\n**Links**\n\n* [Latest Release](https://crates.io/crates/custom_derive/)\n* [Latest Docs](https://docs.rs/crate/custom_derive/)\n* [Repository](https://github.com/DanielKeep/rust-custom-derive/tree/custom_derive-master/)\n\n<span></span></div>\n\n# Usage\n\nThe macro should be used to wrap an entire *single* `enum` or `struct` declaration, including its attributes (both `derive` and others).  All derivation attributes which the macro does *not* recognise will be assumed to be custom, and treated accordingly.\n\n`custom_derive!` assumes that custom derivations are implemented as macros (of the same name).  For example, here is a simple derivation macro:\n\n```rust\n#[macro_use] extern crate custom_derive;\n\ntrait TypeName {\n    fn type_name() -> &'static str;\n}\n\ntrait ReprType {\n    type Repr;\n}\n\nmacro_rules! TypeName {\n    (() $(pub)* enum $name:ident $($tail:tt)*) => { TypeName! { @impl $name } };\n    (() $(pub)* struct $name:ident $($tail:tt)*) => { TypeName! { @impl $name } };\n\n    (@impl $name:ident) => {\n        impl TypeName for $name {\n            fn type_name() -> &'static str { stringify!($name) }\n        }\n    };\n}\n\nmacro_rules! TryFrom {\n    (($repr:ty) $(pub)* enum $name:ident $($tail:tt)*) => {\n        impl ReprType for $name {\n            type Repr = $repr;\n        }\n    };\n}\n\ncustom_derive! {\n    #[allow(dead_code)]\n    #[repr(u8)]\n    #[derive(Clone, Copy, Debug, TryFrom(u8), TypeName)]\n    enum Foo { A, B }\n}\n\nfn main() {\n    let foo = Foo::B;\n    let v = foo as <Foo as ReprType>::Repr;\n    let msg = format!(\"{}: {:?} ({:?})\", Foo::type_name(), foo, v);\n    assert_eq!(msg, \"Foo: B (1)\");\n}\n```\n\nFirst, note that `custom_derive!` passes any arguments on the derivation attribute to the macro.  In the case of attributes *without* any arguments, `()` is passed instead.\n\nSecondly, the macro is passed the entire item, *sans* attributes.  It is the derivation macro's job to parse the item correctly.\n\nThird, each derivation macro is expected to result in zero or more items, not including the item itself.  As a result, it is *not* possible to mutate the item in any way, or attach additional attributes to it.\n\nFinally, `@impl` is merely a trick to pack multiple, different functions into a single macro.  The sequence has no special meaning; it is simply *distinct* from the usual invocation syntax.\n*/","span":{"file_name":"/home/doraneko94/.cargo/registry/src/github.com-1ecc6299db9ec823/custom_derive-0.1.7/src/lib.rs","byte_start":382,"byte_end":3694,"line_start":10,"line_end":107,"column_start":1,"column_end":3}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}